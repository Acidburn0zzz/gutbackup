#!/usr/bin/env bash
#
# Summary: Do a backup action
#
# Usage: gutbackup backup <profile> [instance] [rsync_options]
#
# [OPTIONS]
#   -d      # directory, default is /backup
#
# Examples:
#
#   gutbackup backup hello
#   gutbackup backup hello system --dry-run
#

set -e
[[ -n "$GUTBACKUP_DEBUG" ]] && set -x

source "$GUTBACKUP_ROOT/libexec/lib.sh"
source "$GUTBACKUP_ROOT/libexec/helpers.sh"

[[ -z "$1" ]] && gutbackup-help --usage backup >&2 && exit 1

# settings
dir="/backup"

main() {
  # handle arguments
  TEMP="${TEMP:-/tmp}"
  profile="$1"; shift
  case "$1" in
    "" | -* ) instance="default" ;;
    * ) instance="$1"; shift ;;
  esac
  extra_rsync_options="$@"
  profile_file="$dir/conf/$profile.conf"            # /backup/conf/hello.conf
  profile_dir="$dir/conf/$profile"                  # /backup/conf/hello/
  work_dir="$dir/$profile/work"                     # /backup/hello/work

  run $instance
}

#####
# DSL
#####

# run <instance>
# run inside a subshell, so `source x` has no effect to parent script.
run() {
  # `run this` is alias to `invoke_rsync`
  if [[ "$1" == "this" ]]; then
    invoke_rsync
    return
  fi

  (
    # settings
    unset files exclude
    unset -f backup client_backup
    check_root=false
    host=""
    client_host=""
    src="/"
    backup_options="--archive --hard-links --acls --xattrs --compress --verbose --human-readable -P --stats --del --delete-excluded --recursive --super" # --recursive is for --from-file

    # handle arguments
    instance="$1"
    instance_file="$profile_dir/$instance"            # /backup/conf/hello/<instance>

    # source a
    [[ -e "$profile_file" ]] && source "$profile_file"
    [[ ! -e "$instance_file" ]] && error_exit "gutbackup: instance file does not exists -- $instance_file"
    source "$instance_file"
    [[ "$host" != "" ]] && host_with_colon="$host:" || host_with_colon=""
    [[ "$client_host" != "" ]] && client_host_with_colon="$client_host:" || client_host_with_colon=""

    # main
    [[ $check_root == true && $(id -u) -ne 0 ]] && error_exit "gutbackup: you cannot perform this operation unless you are root."

    if [[ $(type -t "client_backup") == "function" ]]; then
      [[ "$client_host" == "" ]] && error_exit "gutbackup: you defined \`client_backup\` function, but does not set \`client_host\`"
      run_cmd scp $instance_file $client_host_with_colon/tmp/client_backup.gutbackup >/dev/null
      run_cmd ssh $client_host 'mkdir -p /tmp/gutbackup && cd /tmp/gutbackup && source /tmp/client_backup.gutbackup && client_backup'
    fi

    if [[ $(type -t "backup") != "function" ]]; then
      backup() {
        run this
      }
    fi

    mkdir -p "$work_dir"
    cd "$work_dir"
    backup
    cd "$OLDPWD"
  )
}

invoke_rsync() {
  if [[ "$files" != "" ]]; then
    echo "$files" > $TEMP/files.gutbackup
    cmd="--files-from $TEMP/files.gutbackup"
  fi
  if [[ "$exclude" != "" ]]; then
    echo "$exclude" > $TEMP/exclude.gutbackup
    cmd="$cmd --exclude-from $TEMP/exclude.gutbackup"
  fi
  run_cmd rsync $cmd $backup_options $extra_rsync_options $client_host_with_colon$src/ $host_with_colon$dir/$profile/$instance/
}

main "$@"
