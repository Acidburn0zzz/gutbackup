#!/usr/bin/env bash
#
# Summary: Perform a backup
#
# Usage: gutbackup backup <profile> [instance] [options] -- [rsync_options]
#
# [OPTIONS]
#   instance=default
#   -from=/              # Left side of rsync / /backup/<profile>/<instance>/
#   -to=/backup          # Right side of rsync / /backup/<profile>/<instance>/
#   -conf=$to/conf       # Find configuration file at /backup/conf/<profile>/<instance>
#
# Examples:
#
#   gutbackup backup hello
#   gutbackup backup hello system -- --dry-run
#

set -e
[[ -n "$GUTBACKUP_DEBUG" ]] && set -x
source "$GUTBACKUP_ROOT/libexec/lib.sh"
source "$GUTBACKUP_ROOT/libexec/helpers.sh"
[[ -z "$1" ]] && gutbackup-help --usage backup >&2 && exit 1

main() {
  # handle arguments
  eval set -- $(getopt -a -o z -l from:,to:,conf: -- "$@")
  while true; do
    case "$1" in
      --from ) o_from=$2; shift 2 ;;
      --to ) o_to=$2; shift 2 ;;
      --conf ) o_conf=$2; shift 2 ;;
      -- ) shift; break ;;
      * ) error_exit "unhandled options $@" ;;
    esac
  done

  TEMP="${TEMP:-/tmp}"
  PROFILE="$1"; shift
  case "$1" in
    "" | -* ) INSTANCE="default" ;;
    * ) INSTANCE="$1"; shift ;;
  esac
  EXTRA_RSYNC_OPTIONS="$@"

  # source $SYSTEM_FILE
  SYSTEM_FILE="/etc/gutbackup.conf"
  to="/backup"
  conf=""
  [[ -e "$SYSTEM_FILE" ]] && source "$SYSTEM_FILE"
  [[ "$conf" == "" ]] && conf="$to/conf"
  [[ "$o_to" != "" ]] && conf="$o_to/conf"
  [[ "$o_conf" != "" ]] && conf="$o_conf"
  PROFILE_FILE="$conf/$PROFILE.conf"              # /backup/conf/hello.conf
  PROFILE_DIR="$conf/$PROFILE"                    # /backup/conf/hello/

  # main
  run $INSTANCE
}

#####
# DSL
#####

# run <instance>
# it runs inside a subshell, so `source x` has no effect to other scripts.
run() {
  # `run this` is alias to `invoke_rsync`
  if [[ "$1" == "this" ]]; then
    invoke_rsync
    return
  fi

  (
    # handle arguments
    INSTANCE="$1"
    INSTANCE_FILE="$PROFILE_DIR/$INSTANCE"          # /backup/conf/hello/etc

    # source $PROFILE_FILE, $INSTANCE_FILE
    unset files exclude
    unset -f backup client_backup
    from="/"
    to="/backup"
    backup_options="--archive --hard-links --acls --xattrs --compress --verbose --human-readable -P --stats --del --delete-excluded --recursive --super" # --recursive is for --from-file
    check_root=false
    [[ -e "$PROFILE_FILE" ]] && source "$PROFILE_FILE"
    [[ ! -e "$INSTANCE_FILE" ]] && error_exit "gutbackup: instance file does not exists -- $INSTANCE_FILE"
    source "$INSTANCE_FILE"
    [[ "$o_from" != "" ]] && from="$o_from"
    [[ "$o_to" != "" ]] && to="$o_to"
    WORK_DIR="$to/$PROFILE/work"                  # /backup/hello/work
    CLIENT_HOST=$(parse_host $from)

    # main
    [[ $check_root == true && $(id -u) -ne 0 ]] && error_exit "gutbackup: you cannot perform this operation unless you are root."

    if [[ $(type -t "client_backup") == "function" ]]; then
      [[ "$CLIENT_HOST" == "" ]] && error_exit "gutbackup: you defined \`client_backup\` function, but \`from\` does not contain a host."
      run_cmd scp $INSTANCE_FILE $CLIENT_HOST:/tmp/client_backup.gutbackup >/dev/null
      run_cmd ssh $CLIENT_HOST 'mkdir -p /tmp/gutbackup && cd /tmp/gutbackup && source /tmp/client_backup.gutbackup && client_backup'
    fi

    if [[ $(type -t "backup") != "function" ]]; then
      backup() {
        run this
      }
    fi

    mkdir -p "$WORK_DIR"
    cd "$WORK_DIR"
    backup
    cd "$OLDPWD"
  )
}

invoke_rsync() {
  if [[ "$files" != "" ]]; then
    echo "$files" > $TEMP/files.gutbackup
    CMD="--files-from $TEMP/files.gutbackup"
  fi
  if [[ "$exclude" != "" ]]; then
    echo "$exclude" > $TEMP/exclude.gutbackup
    CMD="$CMD --exclude-from $TEMP/exclude.gutbackup"
  fi
  run_cmd rsync $CMD $backup_options $EXTRA_RSYNC_OPTIONS $from/ $to/$PROFILE/$INSTANCE/
}

main "$@"
