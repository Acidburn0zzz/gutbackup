#!/usr/bin/env bash
#
# Summary: Perform a restore
#
# Usage: gutbackup restore <profile> [instance] [rsync_options]
#
# [OPTIONS]
#   -d      # dir, default is /backup
#
# Examples:
#
#   gutbackup restore hello system --dry-run
#

set -e
[[ -n "$GUTBACKUP_DEBUG" ]] && set -x
source "$GUTBACKUP_ROOT/libexec/lib.sh"
source "$GUTBACKUP_ROOT/libexec/helpers.sh"
[[ -z "$1" ]] && gutbackup-help --usage restore >&2 && exit 1

# Settings
dir="/backup"
src="/"
restore_options="--archive --hard-links --acls --xattrs --compress --verbose --human-readable -P --stats"

main() {
  # handle arguments
  profile="$1"; shift
  case "$1" in
    "" | -* ) instance="default" ;;
    * ) instance="$1"; shift ;;
  esac
  extra_rsync_options="$@"
  profile_file="$dir/conf/$profile.conf"            # /backup/conf/hello.conf
  profile_dir="$dir/cof/$profile"                   # /backup/conf/hello/
  instance_file="$profile_dir/$instance"            # /backup/conf/hello/foo
  work_dir="$dir/$profile/work"                     # /backup/hello/work

  # source a b
  [[ -e "$profile_file" ]] && source "$profile_file"
  [[ ! -e "$instance_file" ]] && error_exit "gutbackup: instance file does not exists -- $instance_file"
  source "$instance_file"

  # main
  [[ $check_root == true && $(id -u) -ne 0 ]] && error_exit "gutbackup: you cannot perform this operation unless you are root."

  if [[ $(type -t "restore") != "function" ]]; then
    restore() {
      run this
    }
  fi
  mkdir -p "$work_dir" 2>/dev/null
  cd "$work_dir"
  restore
  cd "$OLDPWD"
}

#####
# DSL
#####

# run this
# run system
run() {
  [[ "$1" == "this" ]] && loc_instance="$instance" || loc_instance="$1"
  cmd="$restore_options $extra_rsync_options $dir/$profile/$loc_instance/ $src/"
  say ">> rsync $cmd"
  rsync $cmd
}

main "$@"
