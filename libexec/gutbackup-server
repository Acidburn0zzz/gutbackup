#!/usr/bin/env bash
#
# Summary: Server mode
#
# Usage: gutbackup server

set -e
[[ -n "$GUTBACKUP_DEBUG" ]] && set -x
source "$GUTBACKUP_ROOT/libexec/lib.sh"

SYSTEM_FILE="/etc/gutbackup.conf"

main() {
  # source $system_file
  to="/backup"
  duration=86400 # one day
  stat_dir="/var/lib/gutbackup"
  [[ -e "$SYSTEM_FILE" ]] && source "$SYSTEM_FILE"
  [[ "$conf" == "" ]] && conf="$to/conf"
  mkdir -p $stat_dir

  for profile in $profiles; do
    stat_file="$stat_dir/$profile.stat"
    lock_file="$stat_dir/$profile.lock"
    if [[ -e "$lock_file" ]]; then
      say "gutbackup: skip $profile because of $lock_file"
      continue
    fi

    if [[ ! -e "$stat_file" ]]; then
      perform_backup
      continue
    fi

    last_time=$(cat "$stat_file")
    now_time=$(date +%s)
    dur=$(($now_time - $last_time))
    if (($dur > $duration)); then
      perform_backup
      continue
    else
      say "$profile has $(($duration-$dur)) seconds left"
    fi
  done
}

# perform_backup
perform_backup() {
  profile_file="$conf/$profile.conf"
  instance_file="$conf/$profile/default"
  [[ -e "$profile_file" ]] && source "$profile_file"
  [[ ! -e "$instance_file" ]] && error_exit "gutbackup: instance does not exists -- $instance_file"
  source "$instance_file"
  host=$(parse_host $from)
  [[ "$host" == "" ]] && error_exit "gutbackup: you have not defined \`from\` in any $profile_file, $instane_file"
  if ! ssh $host echo 1 >/dev/null ; then
    error_exit "gutbackup: $host is not alive"
    exit 0
  fi

  touch "$lock_file"
  if ! "$GUTBACKUP_ROOT/bin/gutbackup" backup $profile; then
    :
  fi
  echo $(date +%s) > $stat_file
  rm "$lock_file"
}

#####
# Helpers
#####

load() {
  :
}

main "$@"
