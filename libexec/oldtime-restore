#!/usr/bin/env bash
#
# Summary: Do a restore action
#
# Usage: oldtime restore [options] <profile> [instance] [rsync_options]
#
# [OPTIONS]
#   -c      # oldtime config directory, default is /oldtime
#
# Default working directory is /oldtime/work.
#
# Examples:
#
#   oldtime restore hello vm
#   oldtime restore -c myoldtime hello vm --dry-run
#

set -e
[[ -n "$OLDTIME_DEBUG" ]] && set -x

source "$OLDTIME_ROOT/libexec/lib.sh"
source "$OLDTIME_ROOT/libexec/helpers.sh"

invoke_rsync() {
	end_cmd=$(sed "1s~\$SRC~$SRC~;s~\$DEST~$DEST~;q" "$1")
	end_cmd=$(echo $end_cmd | awk '{print $2, $1}')
	cmd="$RESTORE_OPTIONS $RSYNC_OPTIONS $end_cmd"
	echo ">> rsync $cmd"
	rsync $cmd
}

# for conf file
# brsnc(filename)
rrsync() {
	file="$profile_dir/$1"

	if [[ ! -e "$file" ]]; then
		echo "oldtime: file does not exists -- $file" >&2
		exit 1
	fi

	invoke_rsync "$file"
}

#####
# Main
#####

if [[ -z "$1" ]]; then
  oldtime-help --usage restore >&2
  exit 1
fi

while getopts "c:" opt; do
	case $opt in
		c ) OLDTIME_DIR=$OPTARG ;;
	esac
done
shift $(( OPTIND - 1 ))

profile="$1"
instance="$2"
conf="$OLDTIME_DIR/$profile.conf"

if [[ ! -e "$conf" ]]; then 
	echo "oldtime: config file doesn't exists -- $conf " >&2
	exit 1
fi

profile_dir=$(absolutename "$OLDTIME_DIR/$profile")

[[ ! -d "$OLDTIME_DIR/work" ]] && mkdir "$OLDTIME_DIR/work"
[[ ! -d "$OLDTIME_DIR/work/tmp" ]] && mkdir "$OLDTIME_DIR/work/tmp"

if [[ -z "$instance" ]]; then
	restore_func="restore"
	shift
else
	restore_func="restore_$instance"
	eval "
		$restore_func(){
			rrsync $instance
		}"
	shift 2
fi
RSYNC_OPTIONS="$*"

echo ">> Load $conf" 
source "$conf"

if [[ $(type -t "$restore_func") != "function" ]]; then
	echo "oldtime: function \`$restore_func' not defined."
	exit 1
fi

cd "$OLDTIME_DIR/work"
before
$restore_func
after
cd "$OLDPWD"
